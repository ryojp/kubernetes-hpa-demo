# References:
# - https://amateur-engineer-blog.com/create-custom-metrics-by-prometheus-adapter/
# - https://qiita.com/masahata/items/062a2ee5762b108e8850
# - https://github.com/kubernetes-sigs/prometheus-adapter/blob/master/docs/config.md
# - https://zenn.dev/lapi/articles/e7ae967aa5161b
# - https://qiita.com/Ladicle/items/f97ab3653e8efa0e9d58

prometheus:
  url: http://prometheus.istio-system.svc.cluster.local
  port: 9090

rules:
  custom:
  - seriesQuery: 'istio_requests_total{reporter="destination", destination_service_namespace="demo", destination_service_name="go-cpu-intensive"}'
    resources:
      overrides:
        destination_service_namespace:
          resource: "namespace"
        destination_service_name:
          resource: "service"
    name:
      as: "requests_per_second"
    metricsQuery: 'sum(rate(<<.Series>>{<<.LabelMatchers>>, reporter="destination"}[5m])) by (<<.GroupBy>>)'

  - seriesQuery: 'istio_request_duration_milliseconds_bucket{reporter="destination", destination_workload_namespace="demo", destination_workload="go-cpu-intensive"}'
    resources:
      overrides:
        destination_workload_namespace:
          resource: "namespace"
        destination_workload:
          resource: "deployment"
    name:
      as: "request_duration_seconds_90tile"
    metricsQuery: 'sum(histogram_quantile(0.90, sum(irate(<<.Series>>{<<.LabelMatchers>>, reporter="destination"}[5m])) by (le,<<.GroupBy>>))) by (<<.GroupBy>>) / 1000'
